<?php
use Application\Model\Game;
use Ouzo\Config;

/** @var Game $game */
$game = $this->game;
?>

<style>
    th {
        text-align: center;
    }

    .bigger {
        font-size: 16pt;
    }
</style>

<div class="col-md-6 col-md-offset-3">
    <?= postButton('New game', createNewGamesPath()) ?>
    <? if (!$game->isFinished()): ?>
        <?= postButton('Cancel game', cancelGamesPath(), ['id' => 'cancel-game']) ?>
        <?= postButton('Next player', nextPlayerGamesPath(), ['class' => 'pull-right', 'id' => 'next_player']) ?>
    <? endif; ?>
    <hr>
    <div id="game_content"></div>
</div>

<?= addFile(['type' => 'script', 'params' => ['url' => '/public/js/long-poll.js']]); ?>

<script>
    $(function () {
        eventBus.bind('hit', function (event, hit) {
            playSoundsForHit(hit);
            if (hit.winner) {
                loadWinnerContent();
            } else {
                loadGameContent();
            }
        });

        eventBus.bind('refresh', function () {
            loadGameContent();
        });

        eventBus.bind('next_player', function () {
            playFilesSynchronously(['next']);
        });

        $("#next_player").submit(function (ev) {
            ev.preventDefault();
            $.post($(this).attr('action'));
        });

        function loadGameContent() {
            $.get('<?= gameContentGamesPath() ?>', function (content) {
                $('#game_content').html(content);
            });
        }

        function loadWinnerContent() {
            $.get('<?= endGameGamesPath() ?>', function (content) {
                $('#game_content').html(content);
                $('#cancel-game').hide();
                $('#next_player').hide();
            });
        }

        function playSoundsForHit(hit) {
            var files = [];
            if (hit.scored) {
                if (hit.field == 25) {
                    var bullseyeSound = (hit.multiplier == 2) ? 'double_bullseye' : 'bullseye';
                    files.push(bullseyeSound);
                } else {
                    if (hit.multiplier == 2) {
                        files.push('double');
                    }

                    if (hit.multiplier == 3) {
                        files.push('triple');
                    }
                }

                if (files.length == 0) {
                    files.push('yes');
                }

                if (hit.winner) {
                    files.push('winner');
                }
            } else {
                files.push('no');
            }

            if (!hit.winner && hit.shots_left == 0) {
                if (hit.shitty_round) {
                    files.push('shitty_' + hit.game);
                }
                files.push('next');
            }

            playFilesSynchronously(files);
        }

        function playFilesSynchronously(files) {
            if (files.length == 0) {
                return;
            }
            var currentPlayIndex = 0;

            function playNext() {
                currentPlayIndex++;
                if (currentPlayIndex < files.length) {
                    play();
                }
            }

            function play() {
                var path = '<?= Config::getPrefixSystem() ?>' + '/public/sounds/' + files[currentPlayIndex] + '.wav';
                logMessage("Play audio" + path, "debug");
                var audio = new Audio(path);
                audio.addEventListener('ended', playNext);
                audio.play();
            }

            try {
                play();
            } catch (e) {
                logMessage(e.message);
            }
        }

        loadGameContent();
    });
</script>
